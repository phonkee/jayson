// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	require "github.com/stretchr/testify/require"

	tester "github.com/phonkee/jayson/tester"
)

// Resolver is an autogenerated mock type for the Resolver type
type Resolver struct {
	mock.Mock
}

// ReverseURL provides a mock function with given fields: t, name, extra
func (_m *Resolver) ReverseURL(t require.TestingT, name string, extra ...tester.ResolverExtra) string {
	_va := make([]interface{}, len(extra))
	for _i := range extra {
		_va[_i] = extra[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, t, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ReverseURL")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(require.TestingT, string, ...tester.ResolverExtra) string); ok {
		r0 = rf(t, name, extra...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewResolver creates a new instance of Resolver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewResolver(t interface {
	mock.TestingT
	Cleanup(func())
}) *Resolver {
	mock := &Resolver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
